# -*- coding: utf-8 -*-
"""daily-update.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1He4Mecqdo6KrXDjwPHq_QHb1wYQUU1cF
"""

#!pip install yahoofinancials
#!pip install dnspython

import numpy as np 
import datetime as dt
import pymongo 
import json
import pickle
import keras
import os
from pytz import timezone
from yahoofinancials import YahooFinancials

PASSWORD = os.environ['PASSWORD']

CRYPTO_LIST = { 'bitcoin': 'BTC-USD', 'dash' : 'DASH-USD', 'ethereum' : 'ETH-USD', 'litecoin' : 'LTC-USD', 'monero' : 'XMR-USD',
                'ripple' : 'XRP-USD' }

FOREX_LIST = { 'AustralianDollar' : 'AUDUSD=X', 'Euro' : 'EURUSD=X', 'NewZealandDollar' : 'NZDUSD=X', 'BritishPound' : 'GBPUSD=X', 
              'BrazilianReal' : 'BRLUSD=X', 'CanadianDollar' : 'CADUSD=X', 'ChineseYuan' : 'CNYUSD=X', 'HongKongDollar' : 'HKDUSD=X', 
              'IndianRupee' : 'INRUSD=X', 'KoreanWon' : 'KRWUSD=X', 'MexicanPeso' : 'MXNUSD=X', 'SouthAfricanRand' : 'ZARUSD=X', 
              'SingaporeDollar' : 'SGDUSD=X', 'DanishKrone' : 'DKKUSD=X', 'JapaneseYen' : 'JPYUSD=X', 'MalaysianRinggit' : 'MYRUSD=X', 
              'NorwegianKrone' : 'NOKUSD=X', 'SwedishKrona' : 'SEKUSD=X', 'SriLankanRupee' : 'LKRUSD=X', 'SwissFranc' : 'CHFUSD=X', 
              'NewTaiwanDollar' : 'TWDUSD=X', 'ThaiBaht' : 'THBUSD=X' }

STOCK_INDICES = { 'S&P500' : '^GSPC', 'Dow30' : '^DJI', 'NASDAQ' : '^IXIC', 'Russel2000' : '^RUT', 'S&P/TSX' : '^GSPTSE', 
                  'IBOVESPA' : '^BVSP', 'IPCMEXICO' : '^MXX', 'Nikkei225' : '^N225', 'HANGSENGINDEX' : '^HSI', 
                  'SSE' : '000001.SS', 'ShenzhenComponent' : '399001.SZ', 'TSEC' : '^TWII', 'KOSPI' : '^KS11', 'STI' : '^STI', 
                  'Jakarta' : '^JKSE', 'FTSEBursaMalaysiaKLCI' : '^KLSE', 'S&P/ASX200' : '^AXJO',  'S&P/NZX50' : '^NZ50', 
                  'S&PBSE' : '^BSESN', 'FTSE100' : '^FTSE', 'DAX' : '^GDAXI', 'CAC40' : '^FCHI', 
                  'ESTX50' : '^STOXX50E', 'EURONEXT100' : '^N100', 'BEL 20' : '^BFX' }

def get_data(database, collection):
  client = pymongo.MongoClient("mongodb+srv://kmhatre:" + PASSWORD + "@crypto.j5hw0.mongodb.net/" + database + "?retryWrites=true&w=majority")
  db = client[database]
  col = db[collection]
  result = []
  for x in col.find():
    result.append( { 'high' : x['high'], 'low' : x['low'], 'open' : x['open'], 'close' : x['close'], 'formatted_date' : x['formatted_date']} )
  return result

def get_new_data(database, collection):
  if database == 'stock':
    start_date = str((dt.datetime.now(timezone('EST')) - dt.timedelta(days=1)))[:10]
    end_date = str((dt.datetime.now(timezone('EST')) - dt.timedelta(days=0)))[:10]
    ticker = STOCK_INDICES[collection]
  elif database == 'forex' or database == 'crypto':
    start_date = str((dt.datetime.now(timezone('EST')) - dt.timedelta(days=1)))[:10]
    end_date = start_date
    if database == 'forex':
      ticker = FOREX_LIST[collection]
    elif database == 'crypto':
      ticker = CRYPTO_LIST[collection]
  yf = YahooFinancials(ticker)
  try:
    prices = yf.get_historical_price_data(start_date, end_date, 'daily')[ticker]['prices'][0]
  except IndexError:
    older_date = str((dt.datetime.now(timezone('EST')) - dt.timedelta(days=2)))[:10]
    prices = yf.get_historical_price_data(older_date, older_date, 'daily')[ticker]['prices'][0]
  result = { 'high' : prices['high'], 'low' : prices['low'], 'open' : prices['open'], 'close' : prices['close'], 'formatted_date' : prices['formatted_date'] }
  return result

def update_database(database, collection):
  client = pymongo.MongoClient("mongodb+srv://kmhatre:" + PASSWORD + "@crypto.j5hw0.mongodb.net/" + database + "?retryWrites=true&w=majority")
  db = client[database]
  col = db[collection]
  new_data = get_new_data(database, collection)
  date  = new_data['formatted_date']
  query = { "formatted_date" : date }
  doc = col.find(query)
  if doc.count() == 0:
    col.insert_one(new_data)
  client.close()
  return new_data

def get_predictions(X_test):
  model_path = 'Models/model.h5'
  model = keras.models.load_model(model_path)
  y_norm_path = 'Normalizers/y_norm.pkl'
  with open(y_norm_path, 'rb') as f:
    y_normalizer = pickle.load(f)
  predictions = y_normalizer.inverse_transform(model.predict(X_test))
  return predictions[0]

def update_true_values():
  client = pymongo.MongoClient("mongodb+srv://kmhatre:" + PASSWORD + "@crypto.j5hw0.mongodb.net/" + 'predictions' + "?retryWrites=true&w=majority")
  db = client['predictions']
  col = db['predictions']
  pred = {}
  for crypto in CRYPTO_LIST.keys():
    yf = YahooFinancials(CRYPTO_LIST[crypto])
    today = str((dt.datetime.now(timezone('EST')) - dt.timedelta(days=1)))[:10]
    yesterday = str((dt.datetime.now(timezone('EST')) - dt.timedelta(days=1)))[:10]
    prices = yf.get_historical_price_data(yesterday, today, 'daily')
    price = prices[CRYPTO_LIST[crypto]]['prices'][0]['open']
    pred[crypto+'_true'] = str(price)
  query = { 'date' : today }
  newvalues = { "$set": pred }
  col.update_one(query, newvalues)
  client.close()

def update_predictions(predictions):
  client = pymongo.MongoClient("mongodb+srv://kmhatre:" + PASSWORD + "@crypto.j5hw0.mongodb.net/" + 'predictions' + "?retryWrites=true&w=majority")
  db = client['predictions']
  col = db['predictions']
  pred = {}
  pred['date'] = str((dt.datetime.now(timezone('EST')) - dt.timedelta(days=0)))[:10]
  i = 0
  for crypto in CRYPTO_LIST.keys():
    pred[crypto+'_pred'] = str(predictions[i])
    pred[crypto+'_true'] = str(0)
    i += 1
  query = { "date" : pred['date'] }
  doc = col.find(query)
  if doc.count() == 0:
    col.insert_one(pred)
  client.close()
  return pred

def daily_update():
  date = str((dt.datetime.now(timezone('EST')) - dt.timedelta(days=1)))[:10]  
  tmp = get_data('crypto', 'bitcoin')
  dates = []
  for d in tmp:
    for key, value in d.items():
      if key == 'formatted_date':
        dates.append(value)
  X_test = []
  if date not in dates:
    print("Daily Updated Started for " + date) 
    for collection in STOCK_INDICES.keys():
      X_test.append(update_database('stock', collection)['close'])
    for collection in FOREX_LIST.keys():
      X_test.append(update_database('forex', collection)['close'])
    for collection in CRYPTO_LIST.keys():
      update_database('crypto', collection)['close']
    print("Data recieved and Database updated")
    norm_path = 'Normalizers/x_norm.pkl'
    with open(norm_path, 'rb') as f:
      x_normalizer = pickle.load(f)
    X_test = np.array(X_test, dtype=np.float32).reshape(1, len(X_test))
    X_test = x_normalizer.transform(X_test)
    predictions = get_predictions(X_test)
    print("Predictions Recieved")
    update_predictions(predictions)
    print("Predictions Updated")
    update_true_values()
    print("True Values Updated")
    print("Daily Updated Finished Successfully")

if __name__ == "__main__":
  daily_update()
